/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <entity>

#define CVAR_DANCE				0
#define CVAR_MESSAGE			1
#define NUM_CVARS				2

new g_count = 1;
new Handle:g_cvars[NUM_CVARS] = INVALID_HANDLE;
new Float:g_entities[5000];

public Plugin:myinfo = 
{
	name = "Dynamic Prop Dance",
	author = "Jindo",
	description = "Have the props perform dances.",
	version = "0.4",
	url = "http://www.topaz-games.com/"
}

public OnPluginStart()
{
	RegAdminCmd("twist", cTwist, ADMFLAG_ROOT);
	RegAdminCmd("notwist", cNoDance, ADMFLAG_ROOT);
	HookEvent("tf_game_over", eGameOver);
	g_cvars[CVAR_DANCE] = CreateConVar("twist_enable", "1", "Enable/disable Prop dancing.");
	g_cvars[CVAR_MESSAGE] = CreateConVar("dtt_message_enable", "1", "Enable/disable the \"Do the Twist\" messages.");
}

public Action:eGameOver(Handle:event, const String:name[], bool:dontBroadcast)
{
	SetConVarInt(g_cvars[CVAR_DANCE], 0);
	ResetEntities();
	CreateTimer(1.0, tResetValue);
}

public Action:cNoDance(client, args)
{
	
	g_count = 1;
	new bool:messagesEnable = GetConVarBool(g_cvars[CVAR_MESSAGE]);
	
	if (messagesEnable)
	{
		PrintCenterTextAll("%N pooped the party.", client);
	}
	
	SetConVarInt(g_cvars[CVAR_DANCE], 0);
	CreateTimer(0.5, tResetValue);
	
	return Plugin_Handled;
	
}

public Action:tResetValue(Handle:timer, any:client)
{
	SetConVarInt(g_cvars[CVAR_DANCE], 1);
}

public OnMapStart()
{
	
	new ent = -1;
	while ((ent = FindEntityByClassname(ent, "prop_dynamic")) != -1)
	{
		new Float:vector[3];
		GetEntPropVector(ent, Prop_Send, "m_angRotation", vector);
		g_entities[ent] = vector[1];
	}
	
}

public Action:cTwist(client, args)
{
	
	g_count = 1;
	
	if (GetConVarBool(g_cvars[CVAR_DANCE]))
	{
	
		new bool:messagesEnable = GetConVarBool(g_cvars[CVAR_MESSAGE]);
		if (messagesEnable)
		{
			PrintCenterTextAll("Get ready to Do The Twist!");
		}
		
		CreateTimer(1.5, tTwist);
		return Plugin_Handled;
		
	}
	else
	{
		
		ReplyToCommand(client, "Twisting is not enabled.");
		return Plugin_Handled;
		
	}
}

public Action:tTwist(Handle:timer, any:client)
{
	g_count++;
	new ent = -1;
	while ((ent = FindEntityByClassname(ent, "prop_dynamic")) != -1)
	{
		new Float:angles[3];
		GetEntPropVector(ent, Prop_Send, "m_angRotation", angles);
		if (g_count <= 5)
		{	
			angles[1] += 18;	
		} else {	
			angles[1] -= 18;	
		}
		TeleportEntity(ent, NULL_VECTOR, angles, NULL_VECTOR);
	}
	if (g_count > 9)
	{
		g_count = 0;	
	}	
	if (GetConVarBool(g_cvars[CVAR_DANCE]))
	{	
		CreateTimer(0.01, tTwist);
	} else {
		ResetEntities();
	}
}

stock ResetEntities()
{
	
	new ent = -1;
	while ((ent = FindEntityByClassname(ent, "prop_dynamic")) != -1)
	{
		new Float:angles[3];
		GetEntPropVector(ent, Prop_Send, "m_angRotation", angles);
		angles[1] = g_entities[ent];
		TeleportEntity(ent, NULL_VECTOR, angles, NULL_VECTOR);
	}
	
}