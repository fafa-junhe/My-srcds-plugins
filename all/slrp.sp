// THE BELOW HEADER MAY NOT BE REMOVED OR MODIFIED
//
// This file is part of SLRS (Source Logging and Reporting Services).
//
// SLRS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// SLRS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with SLRS.  If not, see <http://www.gnu.org/licenses/>.
//
// THE ABOVE HEADER MAY NOT BE REMOVED OR MODIFIED
 
/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include<sdktools_functions>

// Source ID
new sid = -1;

// DB handle
new Handle:hDatabase;


public Plugin:myinfo = 
{
	name = "SLRP (Source Logging and Reporting Plugin)",
	author = "Recon",
	description = "Logs SM events to the SLRS database.",
	version = "1.0.2.0",
	url = "http://forums.alliedmods.net/showthread.php?t=89893"
}


public OnPluginStart()
{
	// Load settings
	LoadSettings();	

	// Connect to the DB	
	SQL_TConnect(GotDatabase, "slrs");
}


/**
 * Loads settings into variables
 *
 * @noreturn
 */
LoadSettings()
{
	// Holds the path to the settings KV file
	decl String:locSettings[256];
	
	BuildPath(Path_SM, locSettings, sizeof(locSettings), "configs/slrp/settings.cfg");
	
	// Make sure the settings file exists
	if (FileExists(locSettings))
	{
		// Load settings KVs
		new Handle:kvSettings = CreateKeyValues("Settings");
		FileToKeyValues(kvSettings, locSettings);
		
		// Load settings		
		sid = KvGetNum(kvSettings, "sid");

		// Close the kv settings handle	
		CloseHandle(kvSettings);
	}
	else
	
		// No setting file, set fail state
		SetFailState("Unable to find configs/slrp/settings.cfg");	
}


public Action:OnLogAction(Handle:source, Identity:ident, 
						  client, target, const String:message[])
{	
	
	// Prevent circular logging
	if (FindPluginByFile("slrs.smx") == source)
		return Plugin_Continue;
	
	
	// Holds the timestamp
	decl String:actionDT[125];
	
	// Get the timestamp
	GetCurrentMySQLTimestamp(actionDT, sizeof(actionDT));	
	
	
	// Holds the query
	decl String:query[512];

	// Holds the query we will execute --- ((1024 * 2) + 1) + (1024)
	decl String:realQuery[3073];
	
	// Holds the source
	decl String:strSource[100];
	
	// Core
	if (ident == Identity_Core)
		strcopy(strSource, sizeof(strSource), "[SM Core]");
	
	// Ext
	else if (ident == Identity_Extension)
	{
		// TODO: Figure out how to get an ext's name
		strcopy(strSource, sizeof(strSource), "[SM Ext]");
	}
	
	// Plugin
	else if (ident == Identity_Plugin)
	{
		// Get the plugin name
		decl String:pluginName[45];		
		GetPluginFilename(source, pluginName, sizeof(pluginName));
		
		// Store the source
		Format(strSource, sizeof(strSource), "[%s]", pluginName);
	}
	
	// Quote the source
	new strSourceQL = strlen(strSource) * 2 + 1;
	decl String:qStrSource[strSourceQL];
	SQL_EscapeString(hDatabase, strSource, qStrSource, strSourceQL);
	
	
	
	// Is there a client for this action?
	if (client > -1)
	{
		// Client info
		decl String:clientName[45];	
		decl String:clientSteam[45];
		decl String:clientTeam[45];
		
		// Get the client log data
		GetClientLogData(client, clientName, sizeof(clientName),
						 clientSteam, sizeof(clientSteam), clientTeam,
						 sizeof(clientTeam));
						 
		// Get the quoted lengths
		new clientNameQL = strlen(clientName) * 2 + 1;
		new clientSteamQL = strlen(clientSteam) * 2 + 1;
		new clientTeamQL = strlen(clientTeam) * 2 + 1;
		
		// Quoted client info
		decl String:qClientName[clientNameQL];
		decl String:qClientSteam[clientSteamQL];
		decl String:qClientTeam[clientTeamQL];
		
		// Quote the client info
		SQL_EscapeString(hDatabase, clientName, qClientName, clientNameQL);
		SQL_EscapeString(hDatabase, clientSteam, qClientSteam, clientSteamQL);
		SQL_EscapeString(hDatabase, clientTeam, qClientTeam, clientTeamQL);
		
		
		
		// Is there a target for this action?
		if (target > -1)
		{
			// Client and target
			
			// Target info
			decl String:targetName[45];
			decl String:targetSteam[45];
			decl String:targetTeam[45];
			
			// Yes, get the target info
			GetClientLogData(target, targetName, sizeof(targetName),
							 targetSteam, sizeof(targetSteam), targetTeam,
							 sizeof(targetTeam));
			
			// Get the quoted lengths
			new targetNameQL = strlen(targetName) * 2 + 1;
			new targetSteamQL = strlen(targetSteam) * 2 + 1;
			new targetTeamQL = strlen(targetTeam) * 2 + 1;
			
			// Quoted target info
			decl String:qTargetName[targetNameQL];
			decl String:qTargetSteam[targetSteamQL];
			decl String:qTargetTeam[targetTeamQL];
				
			// Quote the target log data
			SQL_EscapeString(hDatabase, targetName, qTargetName, targetNameQL);
			SQL_EscapeString(hDatabase, targetSteam, qTargetSteam, targetSteamQL);
			SQL_EscapeString(hDatabase, targetTeam, qTargetTeam, targetTeamQL);
			
			
			// Quote the log message
			new messageQL = strlen(message ) * 2 + 1;			
			decl String:qMessage[messageQL];
			SQL_EscapeString(hDatabase, message, qMessage, messageQL);			
			
			// Query template
			strcopy(query, sizeof(query), "INSERT INTO tblLogMessages(sid, messageDT, messageType, \
											userName, userSteam, userTeam, targetName, targetSteam, \
											targetTeam, logLine) \
										   VALUES(%i, %s , 'Targeted', '%s', '%s', '%s', '%s', '%s', '%s', '%s %s')");
			
			
			// Create the query
			Format(realQuery, sizeof(realQuery), query, sid, actionDT, qClientName, qClientSteam, qClientTeam, qTargetName, qTargetSteam, qTargetTeam, qStrSource, qMessage);
		}
		else
		{
			// Client, no target
			
			// Quote the log message
			new messageQL = strlen(message) * 2 + 1;			
			decl String:qMessage[messageQL];
			SQL_EscapeString(hDatabase, message, qMessage, messageQL);
			
			// Query template
			strcopy(query, sizeof(query), "INSERT INTO tblLogMessages(sid, messageDT, messageType, \
											userName, userSteam, userTeam, logLine) \
										   VALUES(%i, %s , 'User', '%s', '%s', '%s', '%s %s')");
			
			
			// Create the query
			Format(realQuery, sizeof(realQuery), query, sid, actionDT, qClientName, qClientSteam, qClientTeam, qStrSource, qMessage);
		}
		
	}
	else
	{
		// No client or target		
		
		// Quote the log message
		new messageQL = strlen(message) * 2 + 1;			
		decl String:qMessage[messageQL];
		SQL_EscapeString(hDatabase, message, qMessage, messageQL);	
		
		// Query template
		strcopy(query, sizeof(query), "INSERT INTO tblLogMessages(sid, messageDT, messageType, logLine) \
									    VALUES(%i, %s, 'Generic', '%s %s')");
			
		// Create the query
		Format(realQuery, sizeof(realQuery), query, sid, actionDT, qStrSource, qMessage);
		
	}	
	
	// Send query
	SQL_TQuery(hDatabase, T_Generic, realQuery);
	
	// Let the core log this to a file
	return Plugin_Continue;
}


// Gets a MySQL timestamp based on the current
// time on the server
GetCurrentMySQLTimestamp(String:s[], slen)
{
	FormatTime(s, slen, "'%Y-%m-%d %H:%M:%S'");
}


// Gets a client's log data
GetClientLogData(client, String:name[], namelen, String:steam[], steamlen, String:team[], teamlen)
{	
	// Get the client info
	GetClientName(client, name, namelen);
	
	// Handle console data requests
	if (client > 0)
	{
		GetClientAuthString(client, steam, steamlen);
		GetTeamName(GetClientTeam(client), team, teamlen);
	}
	else
	{
		strcopy(name, namelen, "Console");
		strcopy(steam, steamlen, "Console");
		strcopy(team, teamlen, "Console");
	}
}


/***************************** Threaded callbacks *****************************/

public T_Generic(Handle:owner, Handle:hndl, const String:error[], any:data) {
	
	// If the query failed, log the error
	if (hndl == INVALID_HANDLE)
		LogError("[SLRS] Query Failed: %s", error);
	
}

// Callback when we have connected to the database
public GotDatabase(Handle:owner, Handle:hndl, const String:error[], any:data) {
	
	// If the connection failed, log the error
	if (hndl == INVALID_HANDLE)
		LogError("[SLRS] Could not connect to the DB: %s", error);
	else 
	{
		// Save the DB handle
		hDatabase = hndl;
	}	
}