/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <tf2>
#include <tf2_stocks>
#include <tf2items>

new bool:RoundStart = false; //Has the round started yet?
new bool:RoundWin = false;
new Wavenumber = 1;
new deadClientID //Cheater that tried to respawn
//CVar Handles
new Handle:cvarEnabled;
new Handle:cvarBotIncrementRate;
new Handle:cvarOffensiveHealBoost;
new Handle:cvarDefensiveHealBoost;
new Handle:cvarManualEffects;
new Handle:cvarResetHealthRound;
//Tf2Item Handles

public Plugin:myinfo =
{
	name = "[TF2] HordeMod",
	author = "ILikePizza555",
	description = "Fight a horde of bots!",
	version = "1.0.1",
	url = "http://forums.alliedmods.net/showthread.php?t=187560"
}

public OnPluginStart()
{
	//Convars and Commands
	new Handle:cvarVersion = CreateConVar("hordemod_version", "1.0", "HordeMod Version",  FCVAR_REPLICATED|FCVAR_NOTIFY|FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_DONTRECORD);
	cvarEnabled = CreateConVar("hordemod_enabled", "1", "What the point of setting it 0 in the first place?", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	cvarBotIncrementRate = CreateConVar("hordemod_bot_increment_rate", "1", "How many bots are added per round?", FCVAR_PLUGIN, true, 0.0, false);
	cvarOffensiveHealBoost = CreateConVar("hordemod_heal_boost_offense", "550", "How much health should an offensive player start with?", FCVAR_PLUGIN);
	cvarDefensiveHealBoost = CreateConVar("hordemod_heal_boost_defense", "350", "How much health should a defensive player start with?", FCVAR_PLUGIN);
	cvarManualEffects = CreateConVar("hordemod_effects_disabled", "0", "Should the plugin add in the effects", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	cvarResetHealthRound = CreateConVar("hordemod_heal_round_reset", "0", "Should the players' health be restored every round?", FCVAR_PLUGIN, true, 0.0, true, 1.0);

	RegAdminCmd("hordemod_offend_player", Command_Offend, ADMFLAG_CHEATS, "Add Offensive-class effects/powerups to the specified player");
	RegAdminCmd("hordemod_defend_player", Command_Defend, ADMFLAG_CHEATS, "Add Defensive-class effects/powerups to the specified player");
}

public OnMapStart()
{
	PrintToServer("Hordemod loaded successfully");
	//Hook Events
	new bool:Enabled = GetConVarBool(cvarEnabled);
	if(Enabled)
	{
		HookEvent("player_death", Event_Dead, EventHookMode_Pre);
		HookEvent("teamplay_round_start", Event_RoundStart, EventHookMode_Post);
		HookEvent("player_team", Event_ChangeTeam, EventHookMode_Post);
		HookEvent("teamplay_setup_finished", Event_SetupEnd, EventHookMode_Post);
		HookEvent("teamplay_round_win", Event_RoundWin, EventHookMode_PostNoCopy);
		HookEvent("player_spawn", Event_PlayerSpawn, EventHookMode_Post);
	}
	
	ServerCommand("mp_humans_must_join_team red"); //Fixes the bug that allows people to join blue
}

public OnMapEnd()
{
	//Reset the stats to prevent bugs
	RoundStart = false;
	RoundWin = false;
	Wavenumber = 1;
}

//-=-=-=-=-=-=-Functions that work the magic -=-=-=-=-=-=-=-=

//Gets the amount of players, excluding bots
//Not my code, I got it off of a comment on the API
stock GetRealClientCount(bool:inGameOnly = true)
{
	new clients = 0;
	for(new i = 1; i <= MaxClients; i++)
	{
		if(((inGameOnly) ? IsClientInGame(i) : IsClientConnected(i)) && !IsFakeClient( i ) )
		{
			clients++;
		}
	}

	return(clients);
}

public AddOffensiveAttributes(client)
{
	if(GetConVarBool(cvarManualEffects) == false)
	{
		TF2_AddCondition(client, TFCond_MegaHeal, -1.0); //No knockback
		TF2_AddCondition(client, TFCond_SpeedBuffAlly, -1.0); //Speedy
		TF2_AddCondition(client, TFCond_CritOnFirstBlood, -1.0); //First Blood Crit
		TF2_AddCondition(client, TFCond_DefenseBuffed, -1.0); //Batalion's Backup
		SetEntityHealth(client, GetClientHealth(client) + GetConVarInt(cvarOffensiveHealBoost)); //Set the Player Health
	}
}

public AddDefensiveAttributes(client)
{
	if(GetConVarBool(cvarManualEffects) == false)
	{
		TF2_AddCondition(client, TFCond_MegaHeal, -1.0);
		TF2_AddCondition(client, TFCond_SpeedBuffAlly, -1.0);
		TF2_AddCondition(client, TFCond_RegenBuffed, -1.0);
		TF2_AddCondition(client, TFCond_Buffed, -1.0);
		SetEntityHealth(client, GetClientHealth(client) + GetConVarInt(cvarDefensiveHealBoost));
	}
}

public Action:IncrementBots(Handle:timer)
{
	if(!RoundWin)
	{
		Wavenumber++;
		PrintCenterTextAll("Round: %i", Wavenumber);
		//Set the difficulty
		if(Wavenumber <= 3)
			ServerCommand("tf_bot_difficulty 1");
		else if (Wavenumber > 3 && Wavenumber <= 7)
			ServerCommand("tf_bot_difficulty 2");
		else
			ServerCommand("tf_bot_difficulty 3");
		//Add the bots
		new BotIncrementRate = GetConVarInt(cvarBotIncrementRate);
		ServerCommand("tf_bot_add %i blue", BotIncrementRate);

		if(GetConVarBool(cvarResetHealthRound)) // Resets the health every round
		{
			new clientcount = GetRealClientCount();
			for(new i = 1; i < clientcount; i++)
			{
				new TFClassType:Class = TF2_GetPlayerClass(i);
				if(Class == TFClass_Scout || Class == TFClass_Soldier || Class == TFClass_Pyro || Class == TFClass_Medic)
					SetEntityHealth(i, GetClientHealth(i) + GetConVarInt(cvarOffensiveHealBoost));
				if(Class == TFClass_DemoMan || Class == TFClass_Heavy || Class == TFClass_Engineer || TFClass_Sniper)
					SetEntityHealth(i, GetClientHealth(i) + GetConVarInt(cvarDefensiveHealBoost));
			}
		}
	}
	else
	{
		return Plugin_Stop;
	}

	return Plugin_Continue;
}

//Creates a custom medic gun
public PrepareMediGun(client)
{
	new Handle:handleMedigun = TF2Items_CreateItem(OVERRIDE_ATTRIBUTES);

	TF2Items_SetClassname(handleMedigun, "tf_weapon_medigun");
	TF2Items_SetItemIndex(handleMedigun, 29); //Custom Medigun
	TF2Items_SetQuality(handleMedigun, 8);
	TF2Items_SetLevel(handleMedigun, 44);
	TF2Items_SetNumAttributes(handleMedigun, 2);
	TF2Items_SetAttribute(handleMedigun, 0, 8, 1.6); //Faster Heal rate
	TF2Items_SetAttribute(handleMedigun, 1, 10, 1.5); //Faster Ubercharge rate

	new entityWeapon = TF2Items_GiveNamedItem(client, handleMedigun);
	CloseHandle(handleMedigun);
	EquipPlayerWeapon(client, entityWeapon);

	return entityWeapon;
}

//-=-=-=-=-=-=-Event Handlers-=-=-=-=-=-=-=-=-=
public Action:Event_Dead(Handle:event, const String:name[], bool:dontBroadcast)
{
	new deadplayeruid = GetEventInt(event, "userid"); //User id of the dead player
	new deadplayer = GetClientOfUserId(deadplayeruid); //Client id of the cead player
	new team = GetClientTeam(deadplayer); //Team of the ded player

	if(team == _:TFTeam_Red)
	{
		if(GetTeamClientCount(_:TFTeam_Red) - 1 > 0) //If you're not the last dead, change classes
		{
			//PrintCenterTextAll("You died and changed classes");
			ChangeClientTeam(deadplayer, _:TFTeam_Spectator);
			return Plugin_Handled;
		}
		else if(GetTeamClientCount(_:TFTeam_Red) - 1 == 0) //Otherwise blue wins
		{
			//PrintCenterTextAll("Blue Event Sent!");
			new Ent_BlueWin = CreateEntityByName("game_round_win");
			if(Ent_BlueWin != -1)
			{
				DispatchSpawn(Ent_BlueWin);
				DispatchKeyValue(Ent_BlueWin, "Team", "Blue");
				DispatchKeyValue(Ent_BlueWin, "force_map_reset", "1");
				AcceptEntityInput(Ent_BlueWin, "RoundWin");
			}
		}
	}
	else
	{
		return	Plugin_Continue;
	}

	return Plugin_Handled;
}

public Action:Event_RoundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
	//Add Effects
	for(new CurrentClient = 1; CurrentClient <= GetRealClientCount(); CurrentClient++)
	{
		new Team = GetClientTeam(CurrentClient);
		new TFClassType:Class = TF2_GetPlayerClass(CurrentClient);

		if(Team == _:TFTeam_Red) //Team MUST be red
		{
			if(Class == TFClass_Scout || Class == TFClass_Soldier || Class == TFClass_Pyro)
			{
				AddOffensiveAttributes(CurrentClient);
			}
			else if(Class == TFClass_DemoMan || Class == TFClass_Heavy || Class == TFClass_Engineer)
			{
				AddDefensiveAttributes(CurrentClient);
			}
			else if(Class == TFClass_Medic)
			{
				AddOffensiveAttributes(CurrentClient);
				TF2_RemoveWeaponSlot(CurrentClient, TFWeaponSlot_Secondary); //Remove Equiped medic gun
				PrepareMediGun(CurrentClient); //Add my medigun
			}
			else if(Class == TFClass_Sniper)
			{
				AddDefensiveAttributes(CurrentClient);
				//Add something else
			}
			else if(Class == TFClass_Spy)
			{
				AddOffensiveAttributes(CurrentClient);
				//Addsomething else
			}
		}
		else if(Team == _:TFTeam_Spectator)
		{
			ChangeClientTeam(CurrentClient, _:TFTeam_Red);

			if(Class == TFClass_Scout || Class == TFClass_Soldier || Class == TFClass_Pyro)
			{
				AddOffensiveAttributes(CurrentClient);
			}
			else if(Class == TFClass_DemoMan || Class == TFClass_Heavy || Class == TFClass_Engineer)
			{
				AddDefensiveAttributes(CurrentClient);
			}
			else if(Class == TFClass_Medic)
			{
				AddOffensiveAttributes(CurrentClient);
				TF2_RemoveWeaponSlot(CurrentClient, TFWeaponSlot_Secondary); //Remove Equiped medic gun
				PrepareMediGun(CurrentClient); //Add my medigun
			}
			else if(Class == TFClass_Sniper)
			{
				AddDefensiveAttributes(CurrentClient);
			}
			else if(Class == TFClass_Spy)
			{
				AddOffensiveAttributes(CurrentClient);
			}
		}
	}
}

public Action:Event_ChangeTeam(Handle:event, const String:name[], bool:dontBroadcast)
{
	new ClientID = GetClientOfUserId(GetEventInt(event, "userid"));
	new Team = GetEventInt(event, "team");
	new OldTeam = GetEventInt(event, "oldteam");
	
	if(OldTeam == _:TFTeam_Spectator && RoundStart == true) 
	{
		deadClientID = ClientID;
	}
	
}

public Action:Event_SetupEnd(Handle:event, const String:name[], bool:dontBroadcast)
{
	RoundStart = true; //Prevent specaters from joining
	RoundWin = false;
	//Add the bots
	ServerCommand("tf_bot_add 2 blue");
	CreateTimer(30.0, IncrementBots, _, TIMER_REPEAT);
	return Plugin_Handled;
}

public Action:Event_RoundWin(Handle:event, const String:name[], bool:dontBroadcast)
{
	RoundWin = true;
	RoundStart = false;
	deadClientID = 0; //Set to non-player 0
	Wavenumber = 1;
}

public Action:Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new ClientID = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if(ClientID == deadClientID && RoundStart == true)
	{
		SetEntProp(ClientID, Prop_Send, "m_lifeState", 2);
		ChangeClientTeam(ClientID, _:TFTeam_Spectator);
	}
}

//-=-=-=-=-=-=-=-=Command Handlers-=-=-=-=-=-=-=-=-=-=-=-=-
public Action:Command_Offend(client, args)
{
	if(args < 1)
	{
		ReplyToCommand(client, "Usage: hordemod_offend_player <player>");
		return Plugin_Handled;
	}

	new String:name[32];
	new clientcount = GetRealClientCount();
	new target = -1
	GetCmdArg(1, name, sizeof(name));

	for(new i = 1; i <=clientcount; i++)
	{
		if(!IsClientConnected(i))
			continue;

		decl String:testname[32];
		GetClientName(i, testname, sizeof(testname));

		if(StrEqual(name, testname))
			target = i;
	}

	if(target == -1)
	{
		PrintToConsole(client, "[Hordemod] Couldn't find any player with the name %s", name);
		return Plugin_Handled;
	}

	AddOffensiveAttributes(target);

	return Plugin_Handled;
}

public Action:Command_Defend(client, args)
{
	if(args < 1)
	{
		ReplyToCommand(client, "Usage: hordemod_offend_player <player>");
		return Plugin_Handled;
	}

	new String:name[32];
	new clientcount = GetRealClientCount();
	new target = -1
	GetCmdArg(1, name, sizeof(name));

	for(new i = 1; i <=clientcount; i++)
	{
		if(!IsClientConnected(i))
			continue;

		decl String:testname[32];
		GetClientName(i, testname, sizeof(testname));

		if(StrEqual(name, testname))
			target = i;
	}

	if(target == -1)
	{
		PrintToConsole(client, "[Hordemod] Couldn't find any player with the name %s", name);
		return Plugin_Handled;
	}

	AddDefensiveAttributes(target);

	return Plugin_Handled;
}
