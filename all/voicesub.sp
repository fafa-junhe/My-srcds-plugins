/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

public Plugin:myinfo = 
{
	name = "Voice Subtitles",
	author = "Acdervis",
	description = "Changes voice command chat messages.",
	version = "1.1",
	url = "www.xkafe.net"
}

new i;
new Handle:dp;
new Handle:g_VSubEnabled;


public OnPluginStart()
{
	LoadTranslations("voicesub.phrases");
	HookUserMessage(GetUserMessageId("VoiceSubtitle"), VoiceHook, true);
	g_VSubEnabled = CreateConVar("sm_voicesub", "1", "Enable/disabled voice command subtitles translation."); 
}

public Action:VoiceHook(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init)
{
	new clientid = BfReadByte(bf);
	new voicemenu1 = BfReadByte(bf);
	new voicemenu2 = BfReadByte(bf);
	
	if(IsPlayerAlive(clientid) && IsClientInGame(clientid) && GetConVarBool(g_VSubEnabled))
	{
		new String:message[256];
		new String:clientname[64];
		GetClientName(clientid, clientname, sizeof(clientname));
		
		if(voicemenu1 == 0)
		{
			switch(voicemenu2)
			{
				case 0:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Medic");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 1:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Thanks");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 2:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Go");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 3:
				{
					
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "MoveUp");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 4:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "GoLeft");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 5:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "GoRight");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 6:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Yes");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 7:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "No");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
			}
		}
		if(voicemenu1 == 1)
		{
			switch(voicemenu2)
			{
				case 0:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Incoming");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 1:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Spy");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 2:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Sentry Ahead");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
				case 6:
				{
					Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Activate Charge");
					
					StartDataTimer(clientid, String:clientname, String:message);
					return Plugin_Handled;
				}
			}
		}
		if((voicemenu1 == 2) && (voicemenu2 == 0))
		{
			Format(message, sizeof(message), "\x03(%t) %s:\x01 %t","Voice", clientname, "Help");
			
			StartDataTimer(clientid, String:clientname, String:message);
			return Plugin_Handled;

			
		}
		
	}
	return Plugin_Continue;
}

public Action:SubTitle_Print(Handle:timer, Handle:dp)
{
	new String:clientname2[64];
	new String:message2[256];
	ResetPack(dp);
	new clientid2 = ReadPackCell(dp);
	ReadPackString(dp, clientname2, sizeof(clientname2));
	ReadPackString(dp, message2, sizeof(message2));
	
	for(i = 1; i <= MaxClients; i++)
	{
		if(IsClientInGame(i) && GetClientTeam(clientid2) == GetClientTeam(i))
		{
			SayText2(clientid2, message2);
		}
	}
	return Plugin_Handled;
}

stock SayText2(author_index , const String:message[])
{
	new Handle:buffer = StartMessageOne("SayText2", i);
	if (buffer != INVALID_HANDLE)
	{
		BfWriteByte(buffer, author_index);
		BfWriteByte(buffer, true);
		BfWriteString(buffer, message);
		EndMessage();
	}
}

public StartDataTimer(clientid, String:clientname[], String:message[])
{
	CreateDataTimer(0.1, SubTitle_Print, dp);
	WritePackCell(dp, clientid);
	WritePackString(dp, clientname);
	WritePackString(dp, message);
}