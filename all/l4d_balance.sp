/* Plugin Template generated by Pawn Studio */

#pragma semicolon 1
#include <sourcemod>
#include <sdktools>
#include <sdktools_functions>


#define ZOMBIECLASS_SURVIVOR	9
#define ZOMBIECLASS_SMOKER	1
#define ZOMBIECLASS_BOOMER	2
#define ZOMBIECLASS_HUNTER	3
#define ZOMBIECLASS_SPITTER	4
#define ZOMBIECLASS_JOCKEY	5
#define ZOMBIECLASS_CHARGER	6
new ZOMBIECLASS_TANK=	5;

new GameMode;
new L4D2Version;

new bool:Debug=false;
/* 
* 
* some code from "L4D2 Monster Bots",	author = "Machine"
* 
*/
public Plugin:myinfo = 
{
	name = "Automatic Difficult Balance base on intensity",
	author = "Pan Xiaohai",
	description = "<- Description ->",
	version = "1.3",
	url = "<- URL ->"
} 

new bool:ShowHud[MAXPLAYERS+1];
 
new CurrentAverage; 

new PlayerIntensity[MAXPLAYERS+1];
new PlayerTotalIntensity[MAXPLAYERS+1];
new PlayerTick[MAXPLAYERS+1];

new bool:NeedDrawHud=false;
new bool:HaveTank=false;

new AllTotalIntensity;
new AllTotalTick=1; 

new CiCount;
new SiCount;
new SurvivorCount;

new MobTick;

new MaxSpecial;
new MaxCommon;


new AdustTick;
new DirectorStopTick;
new bool:DirectorStoped;

new Handle:l4d_balance_difficulty_min;
new Handle:l4d_balance_difficulty_max;

new Handle:l4d_balance_enable; 
new Handle:l4d_balance_reaction_time; 
new Handle:l4d_balance_setting_password; 

new Handle:l4d_balance_include_bot;

new Handle:l4d_balance_health_increment; 
new Handle:l4d_balance_health_witch;
new Handle:l4d_balance_health_tank; 
new Handle:l4d_balance_health_hunter;
new Handle:l4d_balance_health_smoker; 
new Handle:l4d_balance_health_boomer;
new Handle:l4d_balance_health_charger; 
new Handle:l4d_balance_health_jockey; 
new Handle:l4d_balance_health_spitter; 
new Handle:l4d_balance_health_zombie; 


new Handle:l4d_balance_limit_special; 
new Handle:l4d_balance_limit_special_add; 
new Handle:l4d_balance_limit_common;
new Handle:l4d_balance_limit_common_add;
public OnPluginStart()
{
	GameCheck(); 	
	if(GameMode!=1)return;
	l4d_balance_enable= 			CreateConVar("l4d_balance_enable", "1", " 0:diable balacne, 1:enable");
	l4d_balance_reaction_time= 		CreateConVar("l4d_balance_reaction_time", "30", "reaction time of balance system [10, 60]seconds"); 
	
	l4d_balance_difficulty_min= 	CreateConVar("l4d_balance_difficulty_min", "25", "min difficulty,  if intensity less than this value, the balance will start, infected will accumulate[0, 100]");
	l4d_balance_difficulty_max= 	CreateConVar("l4d_balance_difficulty_max", "65", "max difficult, if intensity more than this value, then turn off the director[0, 100]");	
	l4d_balance_include_bot= 		CreateConVar("l4d_balance_include_bot", "1", "Do the balance system calculate survivor bots 0: ignore survivor bots , 1:include survivor bots"); 
	l4d_balance_setting_password=	CreateConVar("l4d_balance_setting_password", "1234", "password for seting diffulty"); 
	

	l4d_balance_health_increment= 	CreateConVar("l4d_balance_health_add", "20", "The percentage of special infected's health increment for each extra player [0, 50]"); 	
	l4d_balance_health_tank= 		CreateConVar("l4d_balance_health_tank", "8000", "tank's original health"); 	
	l4d_balance_health_witch=		CreateConVar("l4d_balance_health_witch", "1000", "witch's original health");
	l4d_balance_health_hunter=		CreateConVar("l4d_balance_health_hunter", "500", "hunter's original health"); 
	l4d_balance_health_smoker= 		CreateConVar("l4d_balance_health_smoker", "500", "smoker's original health"); 
	l4d_balance_health_boomer=		CreateConVar("l4d_balance_health_boomer", "500", "boomer's original health"); 
	l4d_balance_health_charger= 	CreateConVar("l4d_balance_health_charger", "500", "charger's original health"); 
	l4d_balance_health_jockey= 		CreateConVar("l4d_balance_health_jockey", "500", "jockey's original health"); 
	l4d_balance_health_spitter= 	CreateConVar("l4d_balance_health_spitter", "500", "spitter's original health"); 
	l4d_balance_health_zombie= 		CreateConVar("l4d_balance_health_zombie", "50", "zombie's original health"); 


	l4d_balance_limit_special= 		CreateConVar("l4d_balance_limit_special", "6", "the limit of special infected [0, 20]");
	l4d_balance_limit_special_add= 	CreateConVar("l4d_balance_limit_special_add", "1", " The increment of special's limit for each extra player [0, 5]");
	l4d_balance_limit_common= 		CreateConVar("l4d_balance_limit_common", "30", " z_common_limit [30, 100]"); 
	l4d_balance_limit_common_add= 	CreateConVar("l4d_balance_limit_common_add", "5", " The increment of z_common_limit for each extra player[0, 30]"); 
 
	
	AutoExecConfig(true, "l4d_balance");
	
	RegConsoleCmd("sm_balance", sm_balance); 
	RegConsoleCmd("sm_difficulty", sm_difficulty); 
	RegConsoleCmd("sm_dinfo", sm_dinfo); 
	HookEvent("player_spawn", player_spawn);	
	HookEvent("player_death", player_death); 
	
	HookEvent("round_start", round_start);
	HookEvent("round_end", round_end);
	HookEvent("finale_win", map_transition);
	HookEvent("mission_lost", round_end);
	HookEvent("map_transition",  map_transition);	  	
	ResetAllState();
}

public Action:sm_balance(client,args)
{
	if(client>0)
	{
		ShowHud[client]=!ShowHud[client]; 
	}
}
 
public Action:sm_dinfo(client,args)
{
	if(client>0)
	{
		new String:msgstr[500]="";
		Format(msgstr, 500,"Survior Count : %d \n", SurvivorCount);
		Format(msgstr, 500,"\n%sTank's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_tank)), RoundFloat( GetConVarFloat(FindConVar("z_tank_health"))));
		Format(msgstr, 500,"%sWitch's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_witch)), RoundFloat( GetConVarFloat(FindConVar("z_witch_health"))));
		Format(msgstr, 500,"%sZombie's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_zombie)), RoundFloat( GetConVarFloat(FindConVar("z_health"))));
		Format(msgstr, 500,"%sSmoker's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_smoker)), RoundFloat( GetConVarFloat(FindConVar("z_gas_health"))));
		Format(msgstr, 500,"%sHunter's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_hunter)), RoundFloat( GetConVarFloat(FindConVar("z_hunter_health"))));
		Format(msgstr, 500,"%sBoomer's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_boomer)), RoundFloat( GetConVarFloat(FindConVar("z_exploding_health"))));
		if(L4D2Version)
		{
			Format(msgstr, 500,"%sCharger's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_charger)), RoundFloat( GetConVarFloat(FindConVar("z_charger_health"))));
			Format(msgstr, 500,"%sSpitter's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_spitter)), RoundFloat( GetConVarFloat(FindConVar("z_spitter_health"))));
			Format(msgstr, 500,"%sJockey's Health: %d to %d \n",msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_jockey)), RoundFloat( GetConVarFloat(FindConVar("z_jockey_health"))));
		}
		Format(msgstr, 500,"\n%sSpecial infected limit : %d to %d \n",msgstr, GetConVarInt(l4d_balance_limit_special),  MaxSpecial);
		Format(msgstr, 500,"%sz_common_limit: %d to %d \n",msgstr,  GetConVarInt(l4d_balance_limit_common),  RoundFloat( GetConVarFloat(FindConVar("z_common_limit"))));
		Format(msgstr, 500,"%sz_background_limit: %d \n",msgstr, RoundFloat( GetConVarFloat(FindConVar("z_background_limit"))));
		Format(msgstr, 500,"%sz_mega_mob_size: %d \n",msgstr,  RoundFloat( GetConVarFloat(FindConVar("z_mega_mob_size"))));

		PrintToChat(client, "Plsea check console output");
		PrintToConsole(client, msgstr);
	}
}
 
public Action:sm_difficulty(client,args)
{
	if(client>0)
	{
		decl String:password[20]="";
		decl String:arg[20];
		GetConVarString(l4d_balance_setting_password, password, sizeof(password));
		GetCmdArg(1, arg, sizeof(arg));
		//PrintToChatAll("arg %s, password %s", arg, password);
		if(StrEqual(arg, password))
		{
			GetCmdArg(2, arg, sizeof(arg));
		 
			new d=StringToInt(arg);
			
			if(d>=0 && d<=100)
			{				
				PrintToChatAll("The difficulty change from %d to %d", GetConVarInt(l4d_balance_difficulty_min), d);
				SetConVarInt(FindConVar("l4d_balance_difficulty"), d);
			}
			else
			{
				PrintToChat(client, "Value must >=0 and <=100");				
			}
		}
		else
		{
			PrintToChat(client, "Your password is incorrect");
			PrintToChatAll("The current difficulty is %d", GetConVarInt(l4d_balance_difficulty_min));
		}
	}
}
public Action:player_spawn(Handle:hEvent, const String:strName[], bool:DontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(hEvent, "userid")); 
	if(client>0)
	{
		ShowHud[client]=false;
		if(IsClientInGame(client))PrintToChat(client, "!balance to turn on Hud");
	}
}
public Action:player_death(Handle:hEvent, const String:strName[], bool:DontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(hEvent, "userid"));
	if(client>0)
	{
		ShowHud[client]=true;
		if(IsClientInGame(client))PrintToChat(client, "!balance to turn off Hud");
	}
	
}

public Action:round_start(Handle:event, const String:name[], bool:dontBroadcast)
{ 
	ResetAllState();
	new flags = GetConVarFlags(FindConVar("z_max_player_zombies"));
	SetConVarBounds(FindConVar("z_max_player_zombies"), ConVarBound_Upper, false);
	SetConVarFlags(FindConVar("z_max_player_zombies"), flags & ~FCVAR_NOTIFY);
}
public Action:round_end(Handle:event, const String:name[], bool:dontBroadcast)
{
	ResetAllState();
	for (new i=1; i<=MaxClients; i++)
	{
		if (IsClientInGame(i))
		{
			if (GetClientTeam(i) == 3)
			{
				if (IsFakeClient(i))
				{
					KickClient(i);
				}
			}
		}
	}	
}
public Action:map_transition(Handle:event, const String:name[], bool:dontBroadcast)
{
	new totalaverage=AllTotalIntensity/AllTotalTick; 
	PrintToServer("\x04[balance] \x01Map Change"); 
	PrintToServer("\x04[balance] \x01server intensity average %d", totalaverage); 
	for( new i=1; i<=MaxClients; i++)
	{
		if(IsClientInGame(i) && GetClientTeam(i)==2)
		{
			
			PrintToServer("\x04[balance] \x01%N intensity average %d", i, PlayerTotalIntensity[i]/PlayerTick[i]); 
		}
	}  
	
	ResetAllState(); 
}
ResetAllState()
{ 
	AllTotalIntensity=0;
	AllTotalTick=1;
	DirectorStoped=false;
	AdustTick=GetConVarInt(l4d_balance_reaction_time);
	DirectorStopTick=GetConVarInt(l4d_balance_reaction_time);
	CiCount=SiCount=0;
	NeedDrawHud=false;
	MobTick=0;
	HaveTank=false;
	SurvivorCount=1;
	for( new i=1; i<=MaxClients; i++)
	{
		PlayerIntensity[i]=0;
		PlayerTotalIntensity[i]=0;
		PlayerTick[i]=1; 
	}
}
public OnMapStart()
{
	if(GameMode!=1)return;
	CreateTimer(1.0, TimerUpdatePlayer, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);	
	CreateTimer(1.5, TimerShowHud, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
	CreateTimer(30.0, TimerDelayStartAjust, 0, TIMER_FLAG_NO_MAPCHANGE);			
	ResetAllState();
 	
} 
public Action:TimerUpdatePlayer(Handle:timer, any:data)
{

	new playercout=0;
	new currentAverage=0;
	new infectedCount=0;
	new difficult=GetConVarInt(l4d_balance_difficulty_min);
	new bool:needDrawHud=false;
	new bool:haveTank=false;
 	new survivorCount=0;
	new bool:includeBot=GetConVarInt(l4d_balance_include_bot)==1;
	for( new i=1; i<=MaxClients; i++)
	{
		if(IsClientInGame(i) )
		{
			if(GetClientTeam(i)==2)
			{
				new bool:fake=IsFakeClient(i);
				if(!includeBot && fake)continue;
				if(IsPlayerAlive(i))
				{
					PlayerIntensity[i]=GetEntProp(i, Prop_Send, "m_clientIntensity" );
					PlayerTotalIntensity[i]+=PlayerIntensity[i]; 
					currentAverage+=PlayerIntensity[i];
				}
				else
				{
					PlayerIntensity[i]=difficult;
					PlayerTotalIntensity[i]+=PlayerIntensity[i]; 
					currentAverage+=PlayerIntensity[i];
				}				
				PlayerTick[i]++; 
				playercout++;
				if(ShowHud[i] && !fake)needDrawHud=true;
				survivorCount++;
			}
			else if(IsPlayerAlive(i))
			{
				infectedCount++;
				if(IsInfected(i, ZOMBIECLASS_TANK))haveTank=true;
				
			}
		}
		else PlayerIntensity[i]=0;
	}  
	SurvivorCount=survivorCount;
	HaveTank=haveTank;
	NeedDrawHud=needDrawHud;
	if(playercout>0)CurrentAverage=currentAverage/playercout; 
	else CurrentAverage=0;
	AllTotalIntensity+=CurrentAverage;
	AllTotalTick++;	
	
	SiCount=infectedCount;
	
	new reactionTime=GetConVarInt(l4d_balance_reaction_time); 
	 
	if(CurrentAverage<difficult)AdustTick--;
	else AdustTick++;
	if(AdustTick<=0)AdustTick=0;
	if(AdustTick>=reactionTime)AdustTick=reactionTime;
	
	if(HaveTank)AdustTick=reactionTime;
	
	if(CurrentAverage>GetConVarInt(l4d_balance_difficulty_max))DirectorStopTick--;
	else DirectorStopTick++;
	if(DirectorStopTick<=0)DirectorStopTick=0;
	if(DirectorStopTick>=reactionTime)DirectorStopTick=reactionTime;
	
	if(Debug)
	{
		new totalaverage=AllTotalIntensity/AllTotalTick; 
		PrintToServer("\x04[balance] \x01current intensity %d, average %d", CurrentAverage, totalaverage); 
	}
	
	
	return Plugin_Continue;
}
public Action:TimerAjust(Handle:timer, any:data)
{
	new siNeed=0;
	new ciNeed=0;
	new mobNeed=0;
	new enable=GetConVarInt(l4d_balance_enable);
	if(enable==0)return Plugin_Continue;

	new reactionTime=GetConVarInt(l4d_balance_reaction_time);
	UpdateSeting();
	if(DirectorStopTick==0)
	{
		if(!DirectorStoped)
		{
			PrintToServer("Director Stopped"); 
		}
		SetConVarInt(FindConVar("director_no_specials"), 1);
		SetConVarInt(FindConVar("director_no_mobs"), 1);
		DirectorStoped=true;		
		
	}
	else
	{
		if(DirectorStoped)
		{
			PrintToServer("Director Started"); 
		}
		SetConVarInt(FindConVar("director_no_specials"), 0);
		SetConVarInt(FindConVar("director_no_mobs"), 0);		
		DirectorStoped=false;
	}	
	CiCount=GetInfectedCount();
	
	if(AdustTick==0 ) 
	{			
		SetConVarInt(FindConVar("z_max_player_zombies"), 32);
		if(SiCount<MaxSpecial)
		{ 
			siNeed=1;	  
		}
		MobTick+=2;
		if(CiCount<MaxCommon)
		{ 
			
			ciNeed=0; 
			if( MobTick>=reactionTime)
			{				
				mobNeed=1;
			}
		}
		if(siNeed>0 || ciNeed>0 || mobNeed>0)Z_Spawn(siNeed, ciNeed, mobNeed);
	}
	else MobTick=0;
	return Plugin_Continue;   
}
UpdateSeting()
{ 

	new Float:inc=GetConVarFloat(l4d_balance_health_increment)/100.0;	
	new survivorCount=SurvivorCount;
	if(survivorCount<4)survivorCount=4;	
	inc=inc*(survivorCount-4);
	SetConVarFloat(FindConVar("z_health"),  GetConVarFloat(l4d_balance_health_zombie)*(1.0+inc));	
	SetConVarFloat(FindConVar("z_hunter_health"),  GetConVarFloat(l4d_balance_health_hunter)*(1.0+inc));
	SetConVarFloat(FindConVar("z_gas_health"),  GetConVarFloat(l4d_balance_health_smoker)*(1.0+inc));
	SetConVarFloat(FindConVar("z_exploding_health"),  GetConVarFloat(l4d_balance_health_boomer)*(1.0+inc));
	if(L4D2Version)
	{
		SetConVarFloat(FindConVar("z_charger_health"), GetConVarFloat(l4d_balance_health_charger)*(1.0+inc));
		SetConVarFloat(FindConVar("z_spitter_health"),  GetConVarFloat(l4d_balance_health_spitter)*(1.0+inc));
		SetConVarFloat(FindConVar("z_jockey_health"),  GetConVarFloat(l4d_balance_health_jockey)*(1.0+inc));
	}
	SetConVarFloat(FindConVar("z_witch_health"),  GetConVarFloat(l4d_balance_health_witch)*(1.0+inc));
	SetConVarFloat(FindConVar("z_tank_health"),  GetConVarFloat(l4d_balance_health_tank)*(1.0+inc));
 
	MaxSpecial=GetConVarInt(l4d_balance_limit_special);
	MaxSpecial+=GetConVarInt(l4d_balance_limit_special_add)*(survivorCount-4);		
	
	MaxCommon=GetConVarInt(l4d_balance_limit_common); 
	MaxCommon+=GetConVarInt(l4d_balance_limit_common_add)*(survivorCount-4);		
	SetConVarFloat(FindConVar("z_common_limit"), MaxCommon*1.0);
	SetConVarFloat(FindConVar("z_background_limit"), MaxCommon*0.5);
	SetConVarFloat(FindConVar("z_mega_mob_size"), MaxCommon*1.0);
}
 
public Action:TimerDelayStartAjust(Handle:timer, any:data)
{
	CreateTimer(2.0, TimerAjust, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);	
}

new Handle:pInfHUD 		= INVALID_HANDLE;
public Action:TimerShowHud(Handle:timer, any:data)
{
	if(!NeedDrawHud)return Plugin_Continue;
	pInfHUD = CreatePanel(GetMenuStyleHandle(MenuStyle_Default));
	decl String:buffer[65];	
 	SetPanelTitle(pInfHUD, "Difficulty Balance System"); 
	Format(buffer, sizeof(buffer), "Intensity Statistics, Difficulty is ( %d - %d )", GetConVarInt(l4d_balance_difficulty_min),GetConVarInt(l4d_balance_difficulty_max));	
	DrawPanelItem(pInfHUD, buffer, ITEMDRAW_RAWLINE);
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
 
	Format(buffer, sizeof(buffer), "Current : %d ",  CurrentAverage);
	DrawPanelItem(pInfHUD, buffer);
	
	new totalaverage=AllTotalIntensity/AllTotalTick;
	Format(buffer, sizeof(buffer), "Avarage : %d ", totalaverage);
	DrawPanelItem(pInfHUD, buffer);
	
	if(AdustTick==0)Format(buffer, sizeof(buffer), "Increasing difficulty");
	else Format(buffer, sizeof(buffer), "Countdown to increase difficulty: %d ",  AdustTick);
	DrawPanelItem(pInfHUD, buffer);	
	
	if(DirectorStopTick==0)Format(buffer, sizeof(buffer), "Decreasing difficulty");
	else Format(buffer, sizeof(buffer), "Countdown to decrease difficulty: %d ",  DirectorStopTick);
	DrawPanelItem(pInfHUD, buffer);		
	
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE); 
	DrawPanelItem(pInfHUD, "Infected", ITEMDRAW_RAWLINE);
	
	new sicount=SiCount;
 	 
	new cicount=CiCount;
	
	Format(buffer, sizeof(buffer), "Special infected (%d) : %d ", MaxSpecial, sicount);
	DrawPanelItem(pInfHUD, buffer );
	Format(buffer, sizeof(buffer), "Common infected (%d): %d ", MaxCommon, cicount);
	DrawPanelItem(pInfHUD, buffer );	
	
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE); 
	DrawPanelItem(pInfHUD, "Survivor Intensity"); 
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
	
	new bool:includeBot=GetConVarInt(l4d_balance_include_bot)==1;
	for (new i = 1; i <= MaxClients; i++)
	{
		if (!IsClientInGame(i)) continue;
		if (GetClientTeam(i)==3)continue;
		if (!includeBot && IsFakeClient(i))continue;  
		{
			new a=PlayerTotalIntensity[i]/PlayerTick[i];
			Format(buffer, sizeof(buffer), "%N (%d) : %d ", i  ,a, PlayerIntensity[i]);
			DrawPanelItem(pInfHUD, buffer ,ITEMDRAW_RAWLINE);
		}
	}	
	
	
	for (new i = 1; i <= MaxClients; i++)
	{
		if(!IsClientInGame(i)) continue;
		if(IsFakeClient(i))continue;  
		if(!ShowHud[i])continue;
		if (GetClientMenu(i) == MenuSource_RawPanel || GetClientMenu(i) == MenuSource_None)
		{	
			SendPanelToClient(pInfHUD, i, Menu_InfHUDPanel, 1); 			
		} 
	}
	CloseHandle(pInfHUD);  
	return Plugin_Continue;
}
public Menu_InfHUDPanel(Handle:menu, MenuAction:action, param1, param2) { return; }

Z_Spawn( siCount, ciCount, mob)
{
	new bot = CreateFakeClient("Monster");
	if (bot > 0)	
	{		
		ChangeClientTeam(bot,3);
		for(new i=0; i<siCount; i++)
		{ 
			new random = GetRandomInt(1,6);
			if(!L4D2Version)random=GetRandomInt(1,3);
			switch(random)
			{
				case 1:
				SpawnCommand(bot, "z_spawn", "smoker auto");
				case 2:
				SpawnCommand(bot, "z_spawn", "boomer auto");
				case 3:
				SpawnCommand(bot, "z_spawn", "hunter auto");
				case 4:
				SpawnCommand(bot, "z_spawn", "spitter auto");
				case 5:
				SpawnCommand(bot, "z_spawn", "jockey auto");
				case 6:
				SpawnCommand(bot, "z_spawn", "charger auto");
			}
			
		} 
		for(new i=0; i<ciCount; i++)
		{
			SpawnCommand(bot, "z_spawn", "auto"); 
		} 
		if(mob>0)
		{
			SpawnCommand(bot, "z_spawn", "mob"); 			
			MobTick=0;
		}
		Kickbot(INVALID_HANDLE, bot);
		//CreateTimer(0.1,Kickbot,bot);
	}	  
}
public Action:Kickbot(Handle:timer, any:client)
{
	if (IsClientInGame(client))
	{
		if (IsFakeClient(client))
		{
			KickClient(client);
		}
	}
}
SpawnCommand(client, String:command[], String:arguments[] = "")
{
	if (client)
	{ 
		new flags = GetCommandFlags(command);
		SetCommandFlags(command, flags & ~FCVAR_CHEAT);
		FakeClientCommand(client, "%s %s", command, arguments);
		SetCommandFlags(command, flags);
	}
} 
GetInfectedCount()
{
	new ent=-1;
	new count=0;
	while ((ent = FindEntityByClassname(ent,  "infected" )) != -1)
	{
		count++;
	} 
	return count;
}
GameCheck()
{
	decl String:GameName[16];
	GetConVarString(FindConVar("mp_gamemode"), GameName, sizeof(GameName));
	
	
	if (StrEqual(GameName, "survival", false))
		GameMode = 3;
	else if (StrEqual(GameName, "versus", false) || StrEqual(GameName, "teamversus", false) || StrEqual(GameName, "scavenge", false) || StrEqual(GameName, "teamscavenge", false))
		GameMode = 2;
	else if (StrEqual(GameName, "coop", false) || StrEqual(GameName, "realism", false))
		GameMode = 1;
	else
	{
		GameMode = 0;
 	}
	
 
	GetGameFolderName(GameName, sizeof(GameName));
	if (StrEqual(GameName, "left4dead2", false))
	{
		ZOMBIECLASS_TANK=8;
		L4D2Version=true;
	}	
	else
	{
		ZOMBIECLASS_TANK=5;
		L4D2Version=false;
	}
 
}
IsInfected(client, type)
{
	new class = GetEntProp(client, Prop_Send, "m_zombieClass");
	if(type==class)return true;
	else return false;
}