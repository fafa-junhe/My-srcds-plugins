/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <tf2_stocks>
#include <sdktools>
#define VERSION "1.0.2"
new bool:g_bIsStealth[MAXPLAYERS+1];
new bool:wasSPEAKALL[MAXPLAYERS+1];
new bool:wasMuted[MAXPLAYERS+1];
new bool:wasClientSpy[MAXPLAYERS+1];
new alltalk;

public Plugin:myinfo = 
{
	name = "Spy Talk",
	author = "Xsinthis`",
	description = "Disables alltalk on spies while cloaked or disguised",
	version = VERSION,
	url = "http://skulshockcommunity.com"
}

public OnPluginStart()
{
	CreateConVar("spytalk_version", VERSION, "Version of spytalk", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	new Handle:g_hAlltalk = FindConVar("sv_alltalk");
	alltalk = GetConVarInt(g_hAlltalk);
	HookConVarChange(g_hAlltalk, OnConVarChange);
}

public OnConVarChange(Handle:cvar, const String:oldVal[], const String:newVal[])
{
	alltalk = StringToInt(newVal);
}

public OnClientAuthorized(client, const String:steamid[])
{
	//Just to avoid any errors tracking players
	wasClientSpy[client] = false;
	wasMuted[client] = false;
}

public OnGameFrame()
{
	new clientcount = GetClientCount(true);
	for (new i = 1; i <= clientcount; i++) {
		if (IsClientInGame(i) && IsPlayerAlive(i)) {
			if ((TF2_GetPlayerConditionFlags(i) & TF_CONDFLAG_CLOAKED) || (TF2_GetPlayerConditionFlags(i) & TF_CONDFLAG_DISGUISED)) {
				if (g_bIsStealth[i] == false) {
					g_bIsStealth[i] = true;
					OnStealth(i);
				}
			}
			else {
				if (g_bIsStealth[i] == true) {
					g_bIsStealth[i] = false;
					OnUnStealth(i);
				}
			}

		}
	}
}

public OnStealth(client)
{
	if(GetClientListeningFlags(client) & VOICE_MUTED){
		wasMuted[client] = true;
	}else if(alltalk == 0){
		if(GetClientListeningFlags(client) & VOICE_SPEAKALL){
			SetClientListeningFlags(client, VOICE_TEAM);
			wasSPEAKALL[client] = true;
			if(wasClientSpy[client] == false){
				PrintToChat(client, "\x04[SM]This server is running Spy Talk, you will be automatically set to speak to team everytime you cloak or disguise");
				wasClientSpy[client] = true;
			}
		}else{
			wasSPEAKALL[client] = false;
		}
		wasMuted[client] = false;
	}else if(alltalk == 1){
		if(GetClientListeningFlags(client) & VOICE_TEAM){
			wasSPEAKALL[client] = false;
		}else{
			wasSPEAKALL[client] = true;
			SetClientListeningFlags(client, VOICE_TEAM);
			if(wasClientSpy[client] == false){
				PrintToChat(client, "\x04[SM]This server is running Spy Talk, you will be automatically set to speak to team everytime you cloak or disguise");
				wasClientSpy[client] = true;
			}
		}
		wasMuted[client]=false;
	}else{
		SetFailState("Error, invalid alltalk setting. Current setting : %i. Closing Plugin", alltalk);
	}
}

public OnUnStealth(client)
{
	if(wasMuted[client] == true){

	}else if(wasSPEAKALL[client]){
			SetClientListeningFlags(client, VOICE_SPEAKALL);
			wasSPEAKALL[client] = false;
	}
}