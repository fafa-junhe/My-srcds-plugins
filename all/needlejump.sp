/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <tf2>
#include <tf2_stocks>

#define PLUGIN_VERSION  "0.3"

new Handle:g_hPluginEnabled;
new Handle:g_hFriendlyOnly;
new String:g_tString[32];
new bool:g_bPluginEnabled = true;
new bool:g_bFriendlyOnly = true;

public Plugin:myinfo = 
{
	name = "TF2 Needle Jump",
	author = "TheJCS",
	description = "Adds Needle Jumping on Team Fortress 2",
	version = PLUGIN_VERSION,
	url = ""
}

public OnPluginStart()
{
	CreateConVar("sm_needlejump_version", PLUGIN_VERSION, "Needle Jump plugin Version", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	
	g_hPluginEnabled = CreateConVar("sm_needlejump", "1", "Toggles Needle Jump", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	g_hFriendlyOnly = CreateConVar("sm_needlejump_friendly_only", "1", "Restrict Needle Jumping to friends only", FCVAR_PLUGIN, true, 0.0, true, 1.0);
	
	HookConVarChange(g_hPluginEnabled, cvarPluingEnabledChanged);
	HookConVarChange(g_hFriendlyOnly, cvarFriendlyOnlyChanged);
}

public cvarPluingEnabledChanged(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if(StringToInt(newValue) == 0)
		g_bPluginEnabled = false;
	else
		g_bPluginEnabled = true;
}

public cvarFriendlyOnlyChanged(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if(StringToInt(newValue) == 0)
		g_bFriendlyOnly = false;
	else
		g_bFriendlyOnly = true;
}

public OnGameFrame()
{
	new Float:fEyeAngle[3];
	new iTarget;
	new Float:fVelocity[3];
	if(g_bPluginEnabled){
		for(new client = 1; client <= GetMaxClients(); client++){
			if(IsValidEntity(client) && IsClientInGame(client) && IsPlayerAlive(client)){
				if(GetClientButtons(client) & IN_ATTACK){
					GetClientWeapon(client, g_tString,32);
					if(StrEqual(g_tString, "tf_weapon_syringegun_medic") || StrEqual(g_tString, "tf_weapon_blutsauger")){
						if(GetEntData(GetPlayerWeaponSlot(client, 0), FindSendPropInfo("CTFWeaponBase", "m_iClip1")) != 0){
							GetClientEyeAngles(client, fEyeAngle);
							if(fEyeAngle[0] < -45.0){
								iTarget = GetClientAimTarget(client);
								if(iTarget != -1){
									if(!(g_bFriendlyOnly && GetClientTeam(client) != GetClientTeam(iTarget))){
										if(!(GetEntityFlags(iTarget) & FL_ONGROUND)){
											GetEntPropVector(iTarget, Prop_Data, "m_vecVelocity", fVelocity);
											fVelocity[0] += 10 * Cosine(DegToRad(fEyeAngle[1]));
											fVelocity[1] += 10 * Sine(DegToRad(fEyeAngle[1]));
											fVelocity[2] -= 40 * Sine(DegToRad(fEyeAngle[0]));
											if(FloatAbs(fVelocity[0]) > 400.0){
												if(fVelocity[0] > 0.0)
													fVelocity[0] = 400.0;
												else
													fVelocity[0] = -400.0;
											}
											if(FloatAbs(fVelocity[1]) > 400.0){
												if(fVelocity[1] > 0.0)
													fVelocity[1] = 400.0;
												else
													fVelocity[1] = -400.0;
											}
											if(fVelocity[2] > 400.0)
												fVelocity[2] = 400.0;
											TeleportEntity(iTarget, NULL_VECTOR, NULL_VECTOR, fVelocity);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
