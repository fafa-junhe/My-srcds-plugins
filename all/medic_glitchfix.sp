/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <tf2_stocks>
#include <tf2>

//////////////////////////////////////////////////////
// ABOUT
//
//This plugin specifically targets the Medic glitch.
//The Medic glitch allows him to give his teammates perma regen health
//
//How To Reproduce Glitch:
//1. Be medic
//2. Taunt with Amputator
//3. Disconnect mid-taunt
//4. Anyone who was in your taunt range and didn't have full health now has regenerating health
//
///////////////////////////////////////////////////////
#define PLUGIN_VERSION "1.0.1"

new Handle:c_Enabled   = INVALID_HANDLE;
new bool:pluginEnabled = true;

public Plugin:myinfo = 
{
	name = "[TF2] Medic Glitch Fix",
	author = "Fox",
	description = "Prevents Medic Amputator glitch that allows others to have perma-regen health",
	version = PLUGIN_VERSION,
	url = "http://www.rtdgaming.com"
}

public OnPluginStart()
{
	CreateConVar("sm_medic_glitchfix_enable", PLUGIN_VERSION, "[TF2]Prevents Medic Amputator glitch that allows others to have perma-regen health", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	
	c_Enabled   = CreateConVar("sm_medic_glitchfix_enable",    "1",        "<0/1> Enable Medic Glitch Fix");
	
	HookConVarChange(c_Enabled,	ConVarChange);
	
}

public ConVarChange(Handle:convar, const String:oldValue[], const String:newValue[])
{
	if(convar == c_Enabled)
	{
		if(GetConVarInt(c_Enabled))
		{
			pluginEnabled = true;
			PrintCenterTextAll("Medic Glitch Fix: ENABLED");
		}else{
			pluginEnabled = false;
			PrintCenterTextAll("Medic Glitch Fix: DISABLED");
		}
	}
}

public OnClientDisconnect(client)
{
	if(!pluginEnabled)
		return;
	
	if(!IsClientInGame(client))
		return;
	
	if(TF2_GetPlayerConditionFlags(client) & TF_CONDFLAG_TAUNTING)
	{
		new iWeapon = GetEntPropEnt(client, Prop_Send, "m_hActiveWeapon");
		
		if (!IsValidEntity(iWeapon))
			return;
		
		//Make sure that the active weapon is the Amputator
		if (GetEntProp(iWeapon, Prop_Send, "m_iItemDefinitionIndex") != 304)
			return;
		
		new String:loggedMsg[256];
		
		Format(loggedMsg, sizeof(loggedMsg), "Possible Medic exploit attempt by: %L", client);
		
		LogMessage(loggedMsg);
		PrintToChatAll(loggedMsg);
		PrintToServer(loggedMsg);
		
		//
		FakeClientCommand(client, "explode");
	}
}